{"version":3,"file":"static/js/743.d876ee77.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AuthForm/AuthForm.module.css?9658","webpack://react-homework-template/./src/components/Buttons/AuthButtons/AuthFormButton/AuthFormButton.module.css?529f","components/Buttons/AuthButtons/AuthFormButton/AuthFormButton.jsx","components/AuthForm/AuthForm.jsx","webpack://react-homework-template/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputList\":\"AuthForm_inputList__Bt7z0\",\"input\":\"AuthForm_input__dB7h2\",\"errorInput\":\"AuthForm_errorInput__Pe3yE\",\"errorMessageEmail\":\"AuthForm_errorMessageEmail__+cPok\",\"errorMessagePass\":\"AuthForm_errorMessagePass__7Lbfr\",\"errorMessageConfPass\":\"AuthForm_errorMessageConfPass__MiVu0\",\"linklist\":\"AuthForm_linklist__Knemt\",\"txtLink\":\"AuthForm_txtLink__x6e7-\",\"btnLink\":\"AuthForm_btnLink__426Xi\",\"btnLogContainer\":\"AuthForm_btnLogContainer__Dx0rS\",\"btnRegContainer\":\"AuthForm_btnRegContainer__kY7Uk\",\"close\":\"AuthForm_close__2aBQ4\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AuthFormButton_btn__rXkHK\"};","import PropTypes from 'prop-types';\nimport css from './AuthFormButton.module.css';\n\nconst AuthFormButton = ({ title }) => {\n  return (\n    <button type=\"submit\" className={css.btn}>\n      {title}\n    </button>\n  );\n};\nexport default AuthFormButton;\n\nAuthFormButton.propTypes = {\n  title: PropTypes.string,\n};\n","import css from './AuthForm.module.css';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport classnames from 'classnames';\nimport AuthFormButton from 'components/Buttons/AuthButtons/AuthFormButton/AuthFormButton';\nimport { VscClose } from 'react-icons/vsc';\n\n function validateEmail(value) {\n   if (!value) {\n     return 'Email is required';\n   } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n     return 'Enter a valid Email';\n   }\n }\n\n function validatePassword(value) {\n   const passwordRegex = /(?=.*[0-9])/;\n   if (!value) {\n     return 'Password is required';\n   } else if (value.length < 6) {\n     return 'Password must be 6 characters long';\n   } else if (!passwordRegex.test(value)) {\n     return 'Invalid password. Must contain one number.';\n   } \n}\n\nconst validateConfirmPassword = (pass, value) => {\n\n  if (pass && value) {\n    if (pass !== value) {\n      return 'Password not matched';\n    } \n  }\n};\n \nconst AuthForm = ({ isLoginForm, onSubmit }) => {\n  \n  const handleSubmit = (values) => {\n    onSubmit(values);\n  };\n\n  return (\n    <div className={css.container}>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n          confirmPassword: '',\n        }}\n        onSubmit={(values, actions) => {\n          handleSubmit({ email: values.email, password: values.password });\n          actions.resetForm();\n          console.log('submit', values);\n        }}\n      >\n        {({ errors, touched }) => (\n          <Form className={css.inputList}>\n            <Field\n              // value={email}\n              validate={validateEmail}\n              className={classnames(css.input, {\n                [css.errorInput]: errors.email && touched.email,\n              })}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n            />\n            {errors.email && touched.email && (\n              <div className={css.errorMessageEmail}>\n                <VscClose className={css.close} size=\"26px\" />\n                <p>{errors.email}</p>\n              </div>\n            )}\n\n            <Field\n              // value={password}\n              validate={validatePassword}\n              className={classnames(css.input, {\n                [css.errorInput]: errors.password && touched.password,\n              })}\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n            />\n            {errors.password && touched.password && (\n              <div className={css.errorMessagePass}>\n                <VscClose className={css.close} size=\"26px\" />\n                <p>{errors.password}</p>\n              </div>\n            )}\n\n            <Field\n              type={!isLoginForm ? 'password' : 'hidden'}\n              className={classnames(css.input, {\n                [css.errorInput]: errors.confirmPassword && touched.password,\n              })}\n              name=\"confirmPassword\"\n              required\n              validate={value => validateConfirmPassword(value.password, value)}\n              placeholder=\"Confirm password\"\n            />\n            {!isLoginForm && errors.confirmPassword && (\n              <div className={css.errorMessageConfPass}>\n                {errors.confirmPassword}\n              </div>\n            )}\n            <div\n              className={\n                !isLoginForm ? css.btnRegContainer : css.btnLogContainer\n              }\n            >\n              <AuthFormButton title={!isLoginForm ? 'Registration' : 'Login'} />\n            </div>\n          </Form>\n        )}\n      </Formik>\n      <div className={css.linklist}>\n        <p className={css.txtLink}>\n          {!isLoginForm ? 'Already have an account?' : \"Don't have an account?\"}\n        </p>\n        <Link\n          to={!isLoginForm ? '/login' : '/register'}\n          className={css.btnLink}\n        >\n          {!isLoginForm ? 'Login' : 'Register'}\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthForm;\n\nAuthForm.propTypes = {\n  isLoginForm: PropTypes.bool,\n  onSubmit: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"RegisterPage_section__GPz-D\",\"container\":\"RegisterPage_container__l-2BF\",\"title\":\"RegisterPage_title__Yjy6g\"};","import css from './RegisterPage.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport AuthForm from \"components/AuthForm/AuthForm\";\nimport { register } from \"../../redux/auth/authOperations\";\nimport { getAuth } from 'redux/auth/authSelector';\n\nconst RegisterPage = () => {\n  const { isLogin, token } = useSelector(getAuth);\n  const dispatch = useDispatch();\n  if (isLogin && token) {\n    return <Navigate to=\"/user\" />;\n  }\n\n  const handleSignup = data => {\n    console.log(data);\n    dispatch(register(data));\n  };\n  \n  return (\n    <div className={css.section}>\n      <div className={css.container}>\n        <p className={css.title}>Registration</p>\n        <AuthForm onSubmit={handleSignup} />\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["title","type","className","css","validateEmail","value","test","validatePassword","length","isLoginForm","onSubmit","handleSubmit","values","initialValues","email","password","confirmPassword","actions","resetForm","console","log","errors","touched","validate","classnames","name","placeholder","size","required","pass","validateConfirmPassword","to","useSelector","getAuth","isLogin","token","dispatch","useDispatch","AuthForm","data","register"],"sourceRoot":""}